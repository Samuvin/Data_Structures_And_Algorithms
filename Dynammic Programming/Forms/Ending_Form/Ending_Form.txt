Structure: Ending Form

State Definition:
      The dp[i] array represents the "best solution ending at index i". In the context of LIS, this means the longest increasing subsequence (LIS) 
that includes the element at index i.
      dp[i] specifically stores the length of the LIS that ends at index i.

Problem Setup:
Given an array of integers Arr with indices from 0 to N-1, our task is to calculate the LIS ending at each index i.
The final answer to the LIS problem can be found by taking the maximum value of the dp array once we ve populated it.

Transition:

To compute dp[i], we check all previous indices j where j < i to see if we can extend an LIS ending at j by including Arr[i].
If Arr[j] < Arr[i], it means Arr[i] can follow Arr[j] in an increasing sequence. Thus, we set:

                                              dp[i]=max(dp[i],dp[j]+1)

This transition ensures that we’re building up the longest subsequence ending at each index.

Base Case:

Every single element is, by itself, an increasing subsequence of length 1. Thus, for all i, initialize dp[i] = 1.
Final Answer:

After filling in the dp array, the length of the LIS for the entire array is the maximum value in dp.


Complexity
Time Complexity: 
𝑂(𝑁^2) as we iterate over each pair of indices (i, j) with j < i.
Space Complexity: 



State Definition:

Let dp[i][j] be the maximum sum of any path that ends at cell (i, j).
      This means that dp[i][j] represents the maximum path sum that can be achieved by moving to cell (i, j) from some previous cell,       accumulating values along the way.
Transition:
      To determine dp[i][j], we consider possible paths leading into cell (i, j):
      We could arrive from the cell above (i-1, j).
      We could arrive from the cell to the left (i, j-1).

Therefore, the transition for each cell (i, j) is:

                        dp[i][j]=max(dp[i−1][j]+Arr[i][j],dp[i][j−1]+Arr[i][j])
Here:

      dp[i-1][j] + Arr[i][j] represents the maximum sum path to (i, j) coming from the cell directly above.
      dp[i][j-1] + Arr[i][j] represents the maximum sum path to (i, j) coming from the cell directly to the left.

Initialization:

Starting from a specific cell, such as (0, 0), set:

                                                dp[0][0]=Arr[0][0]
For cells in the first row and first column, only one direction is feasible:
For the first row (moving only from the left): dp[0][j] = dp[0][j-1] + Arr[0][j].
For the first column (moving only from above): dp[i][0] = dp[i-1][0] + Arr[i][0].

Final Answer:

After filling in dp for all cells, the value dp[N-1][M-1] (bottom-right corner) will contain the maximum sum path that ends at (N-1, M-1), assuming we aim to reach this cell.

Complexity:

Time Complexity: 
      O(N×M) since each cell (i, j) only requires constant time to evaluate.
Space Complexity: 
      O(N×M) to store dp values for each cell.
      O(N) for the dp array.
